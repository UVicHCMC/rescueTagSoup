<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="fullBuild" name="rescueTagSoup" xmlns:if="ant:if"
    xmlns:unless="ant:unless">
    <description>
    #####################################################################
    #    Project build file by Martin Holmes (mholmes@uvic.ca), 2024.   #
    
    This build file does these basic tasks:
    
    * Processes a folder of tagsoup HTML to create a parallel folder of
      well-formed XML in the XHTML namespace (using htmlparser-1.4.jar).
    
    * Processes each of those files with XSLT to fix a range of 
      anticipated problems and forms not compatible with XHTML5.
    
    * Validates the resulting HTML with the vnu.jar validator.
    
    It requires java libraries that are in the /lib/ folder.
    
    Just type:
    
    ant -Dsource=pathToSourceFolder -Doutput=pathToOutputFolder
    
    at the command line to run the build. 
    
    #                                                                   #
    #####################################################################
    </description>
    
    <property name="echo.separator" value="************************************************"/>
    
    <!-- ISO 8601 date for injection where appropriate. -->
    <tstamp>
        <format property="today" pattern="yyyy-MM-dd" locale="en,CA"/>
    </tstamp>
    
    <!-- Folder for incoming tagsoup HTML. -->
    <property name="source" value="${basedir}/tests/source"/>
    
    <!-- Folder for outgoing rescued XHTML5 -->
    <property name="output" value="${basedir}/tests/output"/>
    
    <!-- Folder for temporary in-process files. -->
    <property name="temp" value="${basedir}/temp"/>
    
    <!--  We may need ant-contrib, but if not, this can be removed. -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
    
    <!-- Location of Saxon jar. -->
    <property name="saxon" value="${basedir}/lib/saxon-he-12.5.jar"/>
    
    <!-- Location of htmlparser jar. -->
    <property name="htmlparser" value="${basedir}/lib/htmlparser-1.4.jar"/>
    
    <!-- Source HTML documents.  -->
    <fileset id="sourceHtml" dir="${source}">
        <include name="**/*.htm"/>
        <include name="**/*.html"/>
        <include name="**/*.HTM"/>
        <include name="**/*.HTML"/>
    </fileset>
    
    <!-- Half-processed temp documents. -->
    <fileset id="parsedHtml" dir="${temp}">
        <include name="**/*.htm"/>
        <include name="**/*.html"/>
        <include name="**/*.HTM"/>
        <include name="**/*.HTML"/>
    </fileset>
    
    <!-- Output XHTML documents. -->
    <fileset id="outputHtml" dir="${output}">
        <include name="**/*.htm"/>
        <include name="**/*.html"/>
        <include name="**/*.HTM"/>
        <include name="**/*.HTML"/>
    </fileset>
    
    <target name="clean">
        <description>
            TARGET clean:
            Removes old products in case this is required.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Removing old products from the output folder..."/>
        <mkdir dir="${output}"/>
        <delete includeemptydirs="false">
            <fileset refid="outputHtml"/>
        </delete>
        <delete dir="temp"/>
        <mkdir dir="temp"/>
    </target>
    
    <target name="parseAllFiles">
        <description>
            TARGET parseAllFiles 
            This target runs every file found in the source folder
            through the parseOneFile target.
        </description>
        <!-- Just in case it doesn't exist yet. -->
        <mkdir dir="${output}"/>
        <foreach target="parseOneFile" param="sourceFile">
            <path>
                <fileset refid="sourceHtml"/>
            </path>
        </foreach>
    </target>
    
    <target name="parseOneFile">
        <description>
            TARGET parseOneFile
            This target is passed the path to a source tagsoup file and 
            calculates an output path for it, then calls the htmlparser
            jar to process the file. The command-line would be:
            java -cp htmlparser-1.4.jar nu.validator.htmlparser.tools.HTML2XML inputsoup.html output.html
        </description>
        <echo message="${echo.separator}"/>
        <propertyregex property="outputFile" input="${sourceFile}" regexp="${source}" replace="${temp}"/>
        <dirname property="outputDir" file="${outputFile}"/>
        <echo message="Parsing the file ${sourceFile} to create the file ${outputFile}..."/>
        <mkdir dir="${outputDir}"/>
        <java classpath="${basedir}/lib/htmlparser-1.4.jar" 
              classname="nu.validator.htmlparser.tools.HTML2XML"
              fork="true">
            <arg value="${sourceFile}"/>
            <arg value="${outputFile}"/>
        </java>
    </target>
    
    <target name="findExternalResources">
        <description>
            TARGET findExternalResources
            This target parses through all the now-XHTML temporary
            files and compiles a lookup table of all the resources 
            which have been externally referenced (CSS, JS, images
            and so on) using full http requests in the HTML and CSS.
            The lookup is in the form of an XHTML file which can
            be used in a process to replace external links with local
            links. The process also compiles a command-line script which
            will retrieve all of these files and place them in a 
            folder called "externals" in the output folder.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Mapping external references..."/>
        <java fork="true" classname="net.sf.saxon.Transform" classpath="${saxon}" failonerror="true">
            <jvmarg value="-Xmx1024m"/>
            <arg value="-s:${basedir}/xsl/map-externals.xsl"/>
            <arg value="-xsl:${basedir}/xsl/map-externals.xsl"/>
            <arg value="xhtmlFolder=${basedir}/temp"/>
            <arg value="sourceFolder=${source}"/>
            <arg value="outputFolder=${basedir}/temp/externals"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
        </java>
    </target>
    
    <target name="fixAllFiles">
        <description>
            TARGET fixeAllFiles 
            This target runs every file found in the output folder
            through the fixOneFile target.
        </description>
        <foreach target="fixOneFile" param="wellFormedFile">
            <path>
                <fileset refid="parsedHtml"/>
            </path>
        </foreach>
    </target>
    
    <target name="fixOneFile">
        <description>
            TARGET fixOneFile
            This target is passed the path to a parsed and now well-formed XHTML
            file, and processes it with Saxon to perform a range of fixes for 
            known issues.
        </description>
        <echo message="${echo.separator}"/>
        <propertyregex property="outputFile" input="${wellFormedFile}" regexp="${temp}" replace="${output}"/>
        <echo message="Remediating known possible issues in the file ${wellFormedFile} to create ${outputFile}..."/>
        <java fork="true" classname="net.sf.saxon.Transform" classpath="${saxon}" failonerror="true">
            <jvmarg value="-Xmx1024m"/>
            <arg value="-s:${wellFormedFile}"/>
            <arg value="-xsl:${basedir}/xsl/xhtml5-fixes.xsl"/>
            <arg value="-o:${outputFile}/"/>
            <arg value="outputFile=${outputFile}"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
        </java>
    </target>
    
    <target name="validateOutput">
        <description>
            TARGET validateOutput
            This target validates the collection of XHTML5-adjacent documents 
            comprising the output site, using the VNU validator (the same 
            validator used by  the W3C's online validation service).
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Validating the HTML pages produced in the build using the VNU validator."/>
        <java jar="${basedir}/lib/vnu.jar" failonerror="false" fork="true">
            <arg value="--format text"/>
            <arg value="--skip-non-html"/>
            <arg value="--xml"/>
            <arg value="--also-check-css"/>
            <arg value="--errors-only"/>
            <arg value="${output}"/>
        </java>
    </target>
    
    <target name="fullBuild">
        <description>
            TARGET fullBuild
            This runs the entire build process.
        </description>
        <antcall target="clean"/>
        
        <!-- Do initial conversion. -->
        <antcall target="parseAllFiles"/>
        
        <!-- Map any external links. -->
        <antcall target="findExternalResources"/>
        
        <!-- Run remediation XSLT. -->
        <antcall target="fixAllFiles"/>
        
        <antcall target="validateOutput"/>
        
        <echo message="${echo.separator}"/>
        <echo message="Done!"/>
    </target>
  
</project>
